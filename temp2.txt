from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QCloseEvent
from drivers import NIDAQ


# don't change - window geometry may be corrupted
NUM_OF_SENSORS = 8
FRAME_VERTICAL_SHIFT = 200
FRAME_HORIZONTAL_SHIFT = 500


class TestWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(TestWindow, self).__init__()
        self.setObjectName("MainWindow")
        self.setWindowTitle("KMG tester")
        self.resize(1024, 800)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(size_policy)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        font12 = QtGui.QFont()
        font12.setPointSize(12)

        font9 = QtGui.QFont()
        font9.setPointSize(9)

        font12bold = QtGui.QFont()
        font12bold.setPointSize(12)
        font12bold.setBold(True)
        font12bold.setWeight(75)

        font10 = QtGui.QFont()
        font10.setPointSize(10)

        self.sensors = [QtWidgets.QFrame(self.centralwidget) for _ in range(NUM_OF_SENSORS)]
        self.serial_nums = [QtWidgets.QLineEdit(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.range_lists = [QtWidgets.QListWidget(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.tolerance_lists = [QtWidgets.QListWidget(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_off_forwards = [QtWidgets.QLineEdit(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_off_forward_labels = [QtWidgets.QLabel(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_off_reverses = [QtWidgets.QLineEdit(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_off_reverse_labels = [QtWidgets.QLabel(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_off_forward_fixes = [QtWidgets.QCheckBox(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_off_reverse_fixes = [QtWidgets.QCheckBox(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.defects = [QtWidgets.QCheckBox(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_ons = [QtWidgets.QLineEdit(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_on_fixes = [QtWidgets.QCheckBox(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.u_on_labels = [QtWidgets.QLabel(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.off_labels = [QtWidgets.QLabel(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.label_ons = [QtWidgets.QLabel(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.lowers = [QtWidgets.QCheckBox(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.uppers = [QtWidgets.QCheckBox(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.working_labels = [QtWidgets.QLabel(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.reset_buttons = [QtWidgets.QPushButton(self.sensors[i]) for i in range(NUM_OF_SENSORS)]
        self.store_buttons = [QtWidgets.QPushButton(self.sensors[i]) for i in range(NUM_OF_SENSORS)]

        for i in range(NUM_OF_SENSORS):
            if i > 3:
                horizontal_shift = FRAME_HORIZONTAL_SHIFT
                vertical_shift = (i - 4) * FRAME_VERTICAL_SHIFT
            else:
                horizontal_shift = 0
                vertical_shift = i * FRAME_VERTICAL_SHIFT

            self.sensors[i].setGeometry(QtCore.QRect(horizontal_shift, vertical_shift, 450, 200))
            self.sensors[i].setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
            self.sensors[i].setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
            self.sensors[i].setObjectName("sensor_{}".format(i))

            self.serial_nums[i].setGeometry(QtCore.QRect(10, 10, 150, 25))
            self.serial_nums[i].setFont(font12)
            self.serial_nums[i].setText("серийный номер")
            self.serial_nums[i].setObjectName("serial_num_{}".format(i))

            self.range_lists[i] = QtWidgets.QListWidget(self.sensors[i])
            self.range_lists[i].setGeometry(QtCore.QRect(170, 10, 120, 25))
            self.range_lists[i].setObjectName("range_list_{}".format(i))

            self.tolerance_lists[i].setGeometry(QtCore.QRect(300, 10, 120, 25))
            self.tolerance_lists[i].setObjectName("tolerance_list_{}".format(i))

            self.u_off_forwards[i].setGeometry(QtCore.QRect(40, 75, 120, 25))
            self.u_off_forwards[i].setFont(font12)
            self.u_off_forwards[i].setObjectName("u_off_forward_{}".format(i))

            self.u_off_forward_labels[i].setGeometry(QtCore.QRect(40, 55, 120, 20))
            self.u_off_forward_labels[i].setFont(font9)
            self.u_off_forward_labels[i].setText("Прямое Roff, МОм")
            self.u_off_forward_labels[i].setObjectName("u_off_forward_label_{}".format(i))

            self.u_off_reverses[i].setGeometry(QtCore.QRect(200, 75, 120, 25))
            self.u_off_reverses[i].setFont(font12)
            self.u_off_reverses[i].setObjectName("u_off_reverse_{}".format(i))

            self.u_off_reverse_labels[i].setGeometry(QtCore.QRect(200, 55, 120, 20))
            self.u_off_reverse_labels[i].setText("Обратное Roff, МОм")
            self.u_off_reverse_labels[i].setFont(font9)
            self.u_off_reverse_labels[i].setObjectName("u_off_reverse_label_{}".format(i))

            self.u_off_forward_fixes[i].setGeometry(QtCore.QRect(10, 75, 20, 20))
            self.u_off_forward_fixes[i].setStyleSheet("QCheckBox::indicator { width: 30px; height: 30px;}")
            self.u_off_forward_fixes[i].setText("")
            self.u_off_forward_fixes[i].setObjectName("u_off_forward_fix_{}".format(i))

            self.u_off_reverse_fixes[i].setGeometry(QtCore.QRect(170, 75, 20, 20))
            self.u_off_reverse_fixes[i].setStyleSheet("QCheckBox::indicator { width: 30px; height: 30px;}")
            self.u_off_reverse_fixes[i].setText("")
            self.u_off_reverse_fixes[i].setObjectName("u_off_reverse_fix_{}".format(i))

            self.defects[i].setGeometry(QtCore.QRect(340, 75, 70, 20))
            self.defects[i].setFont(font12bold)
            self.defects[i].setText("Брак")
            self.defects[i].setStyleSheet("QCheckBox::indicator { width: 30px; height: 30px;}")
            self.defects[i].setObjectName("defect_{}".format(i))

            self.u_ons[i].setGeometry(QtCore.QRect(40, 140, 120, 25))
            self.u_ons[i].setFont(font12)
            self.u_ons[i].setObjectName("u_on_{}".format(i))

            self.u_on_fixes[i].setGeometry(QtCore.QRect(10, 140, 20, 20))
            self.u_on_fixes[i].setStyleSheet("QCheckBox::indicator { width: 30px; height: 30px;}")
            self.u_on_fixes[i].setText("")
            self.u_on_fixes[i].setObjectName("u_on_fix_{}".format(i))

            self.u_on_labels[i].setGeometry(QtCore.QRect(40, 120, 120, 20))
            self.u_on_labels[i].setFont(font9)
            self.u_on_labels[i].setText("Ron, Ом")
            self.u_on_labels[i].setObjectName("u_on_label_{}".format(i))

            self.off_labels[i].setGeometry(QtCore.QRect(100, 40, 200, 15))
            self.off_labels[i].setFont(font10)
            self.off_labels[i].setText("Разомкнутый ключ")
            self.off_labels[i].setObjectName("off_label_{}".format(i))

            self.label_ons[i].setGeometry(QtCore.QRect(100, 105, 130, 20))
            self.label_ons[i].setFont(font10)
            self.label_ons[i].setText("Замкнутый ключ")
            self.label_ons[i].setObjectName("label_on_{}".format(i))

            self.lowers[i].setGeometry(QtCore.QRect(230, 140, 100, 20))
            self.lowers[i].setStyleSheet("QCheckBox::indicator { width: 30px; height: 30px;}")
            self.lowers[i].setFont(font12bold)
            self.lowers[i].setText("Нижний")
            self.lowers[i].setObjectName("lower_{}".format(i))

            self.uppers[i].setGeometry(QtCore.QRect(330, 140, 100, 20))
            self.uppers[i].setStyleSheet("QCheckBox::indicator { width: 30px; height: 30px;}")
            self.uppers[i].setFont(font12bold)
            self.uppers[i].setText("Верхний")
            self.uppers[i].setObjectName("upper_{}".format(i))

            self.working_labels[i].setGeometry(QtCore.QRect(290, 120, 80, 20))
            self.working_labels[i].setFont(font9)
            self.working_labels[i].setText("Сработал")
            self.working_labels[i].setObjectName("working_label_{}".format(i))

            self.reset_buttons[i].setGeometry(QtCore.QRect(40, 170, 75, 25))
            self.reset_buttons[i].setText("Сброс")
            self.reset_buttons[i].setObjectName("reset_button_{i}")

            self.store_buttons[i].setGeometry(QtCore.QRect(200, 170, 75, 25))
            self.store_buttons[i].setText("Запись")
            self.store_buttons[i].setObjectName("store_button_{}".format(i))

        self.setCentralWidget(self.centralwidget)
        QtCore.QMetaObject.connectSlotsByName(self)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = TestWindow()
    ui.show()
    sys.exit(app.exec())
